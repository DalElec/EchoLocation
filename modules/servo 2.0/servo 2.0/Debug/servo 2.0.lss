
servo 2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000834  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000774  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002aa  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005c  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  8c:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <pwm_init>:
#include <util/delay.h>

void pwm_init()
{
	// initialize timer0 in PWM mode
	TCCR0A |= (1<<WGM00)|(1<<WGM01); //fast PWM mode. TOP = 0xFF
  94:	84 b5       	in	r24, 0x24	; 36
  96:	83 60       	ori	r24, 0x03	; 3
  98:	84 bd       	out	0x24, r24	; 36
	TCCR0A |=(1<<COM0B1)|(1<<COM0A1); //non-inverted PWM waveform
  9a:	84 b5       	in	r24, 0x24	; 36
  9c:	80 6a       	ori	r24, 0xA0	; 160
  9e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=(1<<CS00)|(1<<CS02); //PRESCALER /1024
  a0:	85 b5       	in	r24, 0x25	; 37
  a2:	85 60       	ori	r24, 0x05	; 5
  a4:	85 bd       	out	0x25, r24	; 37

	//The OC0A pin (pin PB3)
	DDRB |= (1<<PB3);
  a6:	23 9a       	sbi	0x04, 3	; 4
  a8:	08 95       	ret

000000aa <main>:
	uint8_t  intitial_duty=(int)((F_CPU*0.615e-3)/1024); //5% duty cycle (0 deg angle)
	uint8_t final_duty=(int)((F_CPU*2.425e-3)/1024); // 10% duty cycle (180 deg angle)
	uint8_t  increment_duty=(int)((F_CPU*0.15e-3)/1024); //duty cycle increments
	
	// initialize PWM
	pwm_init();
  aa:	0e 94 4a 00 	call	0x94	; 0x94 <pwm_init>
	//The OC0A pin (pin PB3)
	DDRB |= (1<<PB3);
}

int main(void)
{
  ae:	88 e0       	ldi	r24, 0x08	; 8
	{
		//start position of the servo motor is at far left (0 deg reference)
		for (int duty_cycle = intitial_duty; duty_cycle < final_duty; duty_cycle += increment_duty)
		{
			//Update the duty cycle
			OCR0A = duty_cycle;
  b0:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	37 e0       	ldi	r19, 0x07	; 7
  b6:	9d e2       	ldi	r25, 0x2D	; 45
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	30 40       	sbci	r19, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x18>
  c2:	00 00       	nop
  c4:	8e 5f       	subi	r24, 0xFE	; 254
	// initialize PWM
	pwm_init();
	while(1)
	{
		//start position of the servo motor is at far left (0 deg reference)
		for (int duty_cycle = intitial_duty; duty_cycle < final_duty; duty_cycle += increment_duty)
  c6:	82 32       	cpi	r24, 0x22	; 34
  c8:	99 f7       	brne	.-26     	; 0xb0 <main+0x6>
  ca:	f1 cf       	rjmp	.-30     	; 0xae <main+0x4>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
